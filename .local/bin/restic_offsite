#!/bin/bash
set -e
# Script to automatically create backups with restic

# --- START CONFIGURATION ---
# REPO_LOCATION="rclone:snow:Backups/aus-box/"
RCLONE_REPO_LOCATION="vault:/vault/backups/aus-box/"
LOCAL_TEMP_DIRECTORY="/mnt/Seagate/offsite_temp/"
# --- END CONFIGURATION ---


CFG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"

[ -v "VERBOSE" ] && set -x

exit_error() {
    echo "Error: $1"
    notify-send -u critical "$1"
    exit 1
}
trap_add() {
    trap_add_cmd=$1; shift || fail "${FUNCNAME} usage error"
    for trap_add_name in "$@"; do
        trap -- "$(
            # helper fn to get existing trap command from output
            # of trap -p
            extract_trap_cmd() { printf '%s\n' "$3"; }
            # print existing trap command with newline
            eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
            # print the new trap command
            printf '%s\n' "${trap_add_cmd}"
        )" "${trap_add_name}" \
            || fail "unable to add to trap ${trap_add_name}"
    done
}
verify_restic_binary() {
    if ! command -v restic 2>&1 /dev/null
    then
        exit_error "Restic binary not found"
    fi
}

load_password() {
    if [ -f "$CFG_DIR/restic_backup/backup_password" ]; then
        PWD_FILE="$CFG_DIR/restic_backup/offsite_pw"
        echo "Reading password from $PWD_FILE"
    else
        printf "Enter repository password: "
        read -sr password
        echo "$password" > "$XDG_RUNTIME_DIR/restic_password" 
        trap 'rm -f $XDG_RUNTIME_DIR/restic_password' EXIT
        PWD_FILE="$XDG_RUNTIME_DIR/restic_password"
    fi
}

run_restic_command() {
    restic --password-file="$PWD_FILE" "$@"
}

load_password

mkdir -p "$LOCAL_TEMP_DIRECTORY"

case "$1" in
"backup")
    offsite_repo_location=$(mktemp -d)
    merged_location="$XDG_RUNTIME_DIR/offsite.merged"
    mkdir -p $merged_location
	_cleanup_mergerfs() {
        echo "Cleaning up mergerfs"
		umount -v "$offsite_repo_location" || true
        rmdir -v "$offsite_repo_location" || true
        umount -v "$merged_location" || true
        rmdir -v "$merged_location" || true
	}
    trap_add _cleanup_mergerfs EXIT
    notify-send "Performing backup to offsite repository"
    echo "Performing backup to offsite repository $REPO_LOCATION"
    echo "backing up packages"
    rm -f "$CFG_DIR/restic_backup/installed_packages" && pacman -Qqe > "$CFG_DIR/restic_backup/installed_packages"
    rclone mount "$RCLONE_REPO_LOCATION" "$offsite_repo_location" &
    pid=$!
    echo "Rclone started as pid $pid"
    trap_add "ps --pid $pid &> /dev/null && kill -9 $pid" EXIT
    echo "Mounted $RCLONE_REPO_LOCATION to $offsite_repo_location"

    mergerfs -o defaults,use_ino,category.create=mfs,minfreespace=1M "$LOCAL_TEMP_DIRECTORY=RW:$offsite_repo_location=NC" "$merged_location"

    echo "Waiting for config file"
    count=0
    until [ -f "$merged_location/config" ]
    do
        if [ "$count" -gt 10 ]; then
            echo "Config file not present after 10 seconds, exiting"
            exit 1
        fi
        count=$((count + 1))
        sleep 1
    done
    echo "Config file is present!"

    run_restic_command -r "$merged_location" backup -x --files-from="$CFG_DIR/restic_backup/include" --exclude-file="$CFG_DIR/restic_backup/exclude" --exclude-if-present=.nobackup --exclude-if-present=.noremote || true
    run_restic_command -r "$merged_location" forget -w 5 -g "host" --prune --max-unused=0

    echo "Moving data"
    rclone move "$LOCAL_TEMP_DIRECTORY" "$RCLONE_REPO_LOCATION" -P --delete-empty-src-dirs
    notify-send "Offiste backup complete"
    ;;
*)
    run_restic_command -r "rclone:$RCLONE_REPO_LOCATION" "$@"
    ;;
esac

