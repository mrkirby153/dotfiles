#!/bin/bash
set -e
# Script to automatically create backups with restic

# --- START CONFIGURATION ---
source "${XDG_CONFIG_DIR:-$HOME/.config}/scripts/restic_offsite"
# --- END CONFIGURATION ---


CFG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"

[ -v "VERBOSE" ] && set -x

exit_error() {
    echo "Error: $1"
    notify-send -u critical "$1"
    exit 1
}
trap_add() {
    trap_add_cmd=$1; shift || fail "${FUNCNAME} usage error"
    for trap_add_name in "$@"; do
        trap -- "$(
            # helper fn to get existing trap command from output
            # of trap -p
            extract_trap_cmd() { printf '%s\n' "$3"; }
            # print existing trap command with newline
            eval "extract_trap_cmd $(trap -p "${trap_add_name}")"
            # print the new trap command
            printf '%s\n' "${trap_add_cmd}"
        )" "${trap_add_name}" \
            || fail "unable to add to trap ${trap_add_name}"
    done
}
verify_restic_binary() {
    if ! command -v restic 2>&1 /dev/null
    then
        exit_error "Restic binary not found"
    fi
}

load_password() {
    if [ -f "$CFG_DIR/restic_backup/backup_password" ]; then
        PWD_FILE="$CFG_DIR/restic_backup/offsite_pw"
        echo "Reading password from $PWD_FILE"
    else
        printf "Enter repository password: "
        read -sr password
        echo "$password" > "$XDG_RUNTIME_DIR/restic_password" 
        trap 'rm -f $XDG_RUNTIME_DIR/restic_password' EXIT
        PWD_FILE="$XDG_RUNTIME_DIR/restic_password"
    fi
}

run_restic_command() {
    restic --compression max --password-file="$PWD_FILE" -r "rclone:$RCLONE_REPO_LOCATION" "$@"
}

load_password

case "$1" in
"backup")
    notify-send "Performing backup to offsite repository"
    echo "Performing backup to offsite repository $REPO_LOCATION"
    echo "backing up packages"
    rm -f "$CFG_DIR/restic_backup/installed_packages" && pacman -Qqe > "$CFG_DIR/restic_backup/installed_packages"

    run_restic_command backup -x --files-from="$CFG_DIR/restic_backup/include" --exclude-file="$CFG_DIR/restic_backup/exclude" --exclude-file="$CFG_DIR/restic_backup/offsite_exclude" --exclude-if-present=.nobackup --exclude-if-present=.noremote || true
    run_restic_command forget -w 5 -g "host" --prune --max-unused=0

    notify-send "Offiste backup complete"
    ;;

*)
    run_restic_command "$@"
    ;;
esac

