#!/usr/bin/env python3

try:
    import pulsectl
    import notify2
    import json
    import os
    import argparse
    import subprocess
    from packaging import version
except:
    print("Missing dependency. Ensure that pulsectl and notify2 are installed!")
    exit(1)


CONFIG_LOCATION = os.path.expanduser("~/.pypulse.json")

HEADPHONES = None
SPEAKERS = None

notify_initialized = False


def find_sink(name: str, pa: pulsectl.Pulse):
    try:
        return pa.get_sink_by_name(name)
    except:
        send_notification(f"Could not find sink {name}")
        exit(1)

def find_source(name: str, pa: pulsectl.Pulse):
    try:
        return pa.get_source_by_name(name)
    except:
        send_notification(f"Could not find source {name}")
        exit(1)

def send_notification(message):
    global notify_initialized
    if not notify_initialized:
        notify2.init("PyPulse")
        notify_initialized = True
    notice = notify2.Notification('PyPulse', message)
    notice.show()
    return

def load_config():
    global HEADPHONES, SPEAKERS
    with open(CONFIG_LOCATION, 'r') as cfg_file:
        raw_data = cfg_file.read()
        raw_json = json.loads(raw_data)
        HEADPHONES = raw_json['headphones']
        SPEAKERS = raw_json['speakers']

def write_config(headphones, speakers):
    struct = {
        'headphones': headphones,
        'speakers': speakers
    }
    with open(CONFIG_LOCATION, 'w+') as cfg_file:
        cfg_file.write(json.dumps(struct))
    print(f"Config written to {CONFIG_LOCATION}")


def dmenu_prompt(args, prompt=None):
    cmd = ['dmenu', '-c', '-l', '20', '-i']
    if prompt is not None:
        cmd.extend(['-p', prompt])
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    (stdout, _) = proc.communicate(input="\n".join(args).encode('utf-8'))
    if proc.returncode != 0:
        return None
    return stdout.decode('utf-8')[:-1]

def dmenu_select():
    with pulsectl.Pulse('PyPulse') as pulse:
        default_sink = pulse.server_info().default_sink_name
        name_to_sink = {}
        args = []
        for sink in pulse.sink_list():
            name_to_sink[sink.description] = sink.name
            desc = sink.description
            if default_sink == sink.name:
                desc = f"{desc}*"
            args.append(desc)
        args.append("Change Default Microphone")
        dev_name = dmenu_prompt(args, prompt="Select a device to switch to")
        if dev_name is None:
            print("Canceled selection")
            exit(0)
        if dev_name == "Change Default Microphone":
            set_default_mic()
            exit(0)
        alsa_name = name_to_sink.get(dev_name, None)
        if alsa_name is None:
            print(f"Could not find device {dev_name}")
            exit(1)
        print(f"Switching to {dev_name} ({alsa_name})")
        set_default(alsa_name)


def setup():
    with pulsectl.Pulse('PyPulse') as pulse:
        # Show a list of sinks and ask the user to specify
        idx = 1
        for sink in pulse.sink_list():
            print(f"{idx}: {sink.description}")
            idx += 1
        headphones_id = int(input("Select the audio device to use as headphones > "))
        speakers_id = int(input("Select the audio device to use as speakers > "))
        if headphones_id == speakers_id:
            print("You cannot use the same device as both headphones and speakers")
            exit(1)
        if headphones_id > idx or headphones_id < 1:
            print("Invalid headphone output provided")
            exit(1)
        if speakers_id > idx or speakers_id < 1:
            print("Invalid speaker output provided")
            exit(1)
        headphone_sink = pulse.sink_list()[headphones_id-1]
        speakers_sink = pulse.sink_list()[speakers_id-1]

        write_config(headphone_sink.name, speakers_sink.name)
        print(f"Selected {headphone_sink.name} as headphones and {speakers_sink.name} as speakers")
        exit(0)


def set_default(new_sink_name):
    with pulsectl.Pulse('PyPulse') as pulse:
        # Determine the default sink
        default_sink = pulse.server_info().default_sink_name
        print(f"The default sink is currently {default_sink}")

        new_sink = find_sink(new_sink_name, pulse)
        if new_sink is None:
            print(f"Could not find sink with name: {new_sink_name}. Try running the setup wizard again")
            exit(1)
        else:
            print(f"Found sink {new_sink.index}")

        # Move all the sink inputs to the new output
        # No longer needed as of PulseAudio 14
        if version.parse(pulse.server_info().server_version) < version.parse("14.0"):
            for sink_input in pulse.sink_input_list():
                print(f"Moving sink input {sink_input.index} to sink {new_sink.index}")
                try:
                    pulse.sink_input_move(sink_input.index, new_sink.index)
                except:
                    print(f"Could not move sink input {sink_input.name} to {new_sink.index}")

        # Set default device
        if new_sink_name == default_sink:
            print("Skipping default set")
        else:
            print("Setting default sink")
            pulse.default_set(new_sink)
        send_notification(f"Set default pulse device to {new_sink.description}")

def set_default_mic():
    with pulsectl.Pulse('PyPuse') as pulse:
        default_source = pulse.server_info().default_source_name
        print(f"The default source is {default_source}")

        name_to_source = {}
        args = []
        for source in pulse.source_list():
            if source.name.endswith('monitor'):
                continue
            name_to_source[source.description] = source.name
            desc = source.description
            if source.name == default_source:
                desc = f"{desc}*"
            args.append(desc)
        
        dev_name = dmenu_prompt(args, "Select a microphone to use")
        
        if dev_name is None:
            print(f"Nothing selected")
            exit(1)

        target_source_name = name_to_source.get(dev_name, None)
        if target_source_name is None:
            print(f"Target source {dev_name} was not found!")
            exit(1)
        
        new_source = find_source(target_source_name, pulse)

        if target_source_name == default_source:
            print("Skipping default set")
        else:
            print("Setting default source")
            pulse.default_set(new_source)
        send_notification(f"Set default pulse input device to {new_source.description}")


def main():
    parser = argparse.ArgumentParser(description='Sets default PulseAudio devices')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--headphones', '-p', action='store_true', help='Switch default device to headphones')
    group.add_argument('--speakers', '-s', action='store_true', help='Switch default device to speakers')
    group.add_argument('--setup', action='store_true', help='Run setup wizard')
    group.add_argument('--config', '-c', action='store_true', help='Show the current configuration')
    group.add_argument('--select', '-l', action='store_true', help='Use dmenu to select')

    args = parser.parse_args()

    if args.headphones:
        # Set headphones
        load_config()
        set_default(HEADPHONES)
    elif args.speakers:
        # Set speakers
        load_config()
        set_default(SPEAKERS)
    elif args.setup:
        # Run setup
        setup()
    elif args.config:
        # Dump config
        load_config()
        print(f"Headphones: {HEADPHONES}")
        print(f"Speakers: {SPEAKERS}")
    elif args.select:
        dmenu_select()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
