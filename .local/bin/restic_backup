#!/bin/bash
set -eE
# Script to automatically create backups with restic

# --- START CONFIGURATION ---
source "${XDG_CONFIG_DIR:-$HOME/.config}/scripts/restic_backup"
# --- END CONFIGURATION ---


LOCKFILE="$XDG_RUNTIME_DIR/restic_backup.lock"
CFG_DIR="${XDG_CONFIG_DIRS:-$HOME/.config}"

exit_error() {
    echo "Error: $1"
    notify-send -u critical "$1"
    exit 1
}
verify_restic_binary() {
    if ! command -v restic &> /dev/null
    then
        exit_error "Restic binary not found"
    fi
}

verify_repo() {
    if [ ! -d "$REPO_LOCATION" ]; then
        exit_error "Repository at $REPO_LOCATION was not found"
    fi
}

acquire_lock() {
    echo "Acquiring lock at $LOCKFILE"
    if { set -C; > "$LOCKFILE";  }; then
        echo "Lock acquired"
        trap 'rm -f $LOCKFILE' EXIT
    else
        echo "Backup is already in progress. If you are confident no other backup processes are running delete $LOCKFILE"
        exit 1
    fi
}

load_password() {
    if [ -f "$CFG_DIR/restic_backup/backup_password" ]; then
        PWD_FILE="$CFG_DIR/restic_backup/backup_password"
        echo "Reading password from $PWD_FILE"
    else
        echo -n "Enter repository password: "
        read -sr password
        echo "$password" > "$XDG_RUNTIME_DIR/restic_password" 
        trap 'rm -f $XDG_RUNTIME_DIR/restic_password' EXIT
        PWD_FILE="$XDG_RUNTIME_DIR/restic_password"
    fi
}


# Runs a restic command on the repository
run_restic_command() {
    restic -r "$REPO_LOCATION" --password-file="$PWD_FILE" "$@"
}

perform_automatic_backup() {
    tmp_out=$(mktemp)
    trap "rm -rfv $tmp_out" ERR
    trap "rm -rfv $tmp_out" EXIT
    trap "rm -rfv $tmp_out" SIGINT
    start_time=$(date +"%Y-%m-%d %H:%M:%S")
    start_s=$(date +"%s")
    echo "===== Starting automatic backup at $start_time ====="
    trap 'notify-send -u critical "Backup Failed" "The restic backup did not complete successfully"' ERR
    acquire_lock
    echo "Back up a list of installed packages"
    rm -f "$CFG_DIR/restic_backup/installed_packages" && pacman -Qqe > "$CFG_DIR/restic_backup/installed_packages"
    if [ -t 0 ]; then
        echo "Running in interactive mode"
        run_restic_command backup -x --files-from="$CFG_DIR/restic_backup/include" --exclude-file="$CFG_DIR/restic_backup/exclude" --exclude-if-present=.nobackup || true
    else
        echo "Logging output to $tmp_out"
        (run_restic_command backup -x --files-from="$CFG_DIR/restic_backup/include" --exclude-file="$CFG_DIR/restic_backup/exclude" --exclude-if-present=.nobackup || true) | tee "$tmp_out"
    fi
    echo "===== Automatic Backup Complete ====="
    runtime=$(($(date +'%s') - start_s))
    if [ -t 0 ]; then
        notify-send -t 10000 "Backup Complete" "Backup performed successfully in ${runtime}s"
    else
        added=$(grep "Added to the repository:" "$tmp_out" | cut -d " " -f 5-)
        notify-send -t 10000 "Backup Complete" "Backup performed successfully in ${runtime}s. Added: $added"
    fi
    rm -rfv "$tmp_out"
}



verify_restic_binary
verify_repo
load_password

restic cache --cleanup
case "$1" in
"backup")
"auto-backup")
    perform_automatic_backup
    ;;
"clean-backup")
    run_restic_command forget -H 24 -d 14 -w 4 -m 6 -y 5 -g "host"
    run_restic_command prune --max-unused=0
    ;;
*)
    run_restic_command "$@"
    ;;
esac
