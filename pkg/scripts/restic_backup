#!/bin/bash
set -eE
# Script to automatically create backups with restic
[ -v "VERBOSE" ] && set -x

LOCKFILE="$XDG_RUNTIME_DIR/${LOCKFILE_NAME:-restic_backup}.lock"

if [ -f "$REPO_LOCATION" ]; then
    echo "Repo location is a file. Reading repo from $REPO_LOCATION"
    export REPO_LOCATION=$(cat "$REPO_LOCATION")
fi

exit_error() {
    echo "Error: $1"
    notify-send -u critical "$1"
    exit 1
}

verify_restic_binary() {
    if ! command -v restic &> /dev/null
    then
        exit_error "Restic binary not found"
    fi
}

verify_repo() {
    if [ ! -d "$REPO_LOCATION" ]; then
        exit_error "Repository at $REPO_LOCATION was not found"
    fi
}

acquire_lock() {
    echo "Acquiring lock at $LOCKFILE"
    if { set -C; > "$LOCKFILE";  }; then
        echo "Lock acquired"
        trap 'rm -f $LOCKFILE' EXIT
    else
        echo "Backup is already in progress. If you are confident no other backup processes are running delete $LOCKFILE"
        notify-send "Backup is already in progress"
        exit 1
    fi
}

# Runs a restic command on the repository
run_restic_command() {
    restic -r "$REPO_LOCATION" --password-file="$PWD_FILE" "$@"
}

perform_automatic_backup() {
    tmp_out=$(mktemp)
    trap "rm -rfv $tmp_out" ERR
    trap "rm -rfv $tmp_out" EXIT
    trap "rm -rfv $tmp_out" SIGINT
    start_time=$(date +"%Y-%m-%d %H:%M:%S")
    start_s=$(date +"%s")
    echo "===== Starting automatic backup at $start_time ====="
    trap 'notify-send -u critical "Backup Failed" "The restic backup did not complete successfully"' ERR
    acquire_lock

    command_args="backup -x --files-from=$INCLUDE_FILE --exclude-file=$EXCLUDE_FILE $EXCLUDE_ARGS"
    if [ -t 0 ]; then
        echo "Running in interactive mode"
        run_restic_command $command_args || true
    else
        echo "Logging output to $tmp_out"
        (run_restic_command $command_args || true) | tee "$tmp_out"
    fi
    echo "===== Automatic Backup Complete ====="
    runtime=$(($(date +'%s') - start_s))
    if [ -t 0 ]; then
        notify-send -t 10000 "Backup Complete" "Backup performed successfully in ${runtime}s"
    else
        added=$(grep "Added to the repository:" "$tmp_out" | cut -d " " -f 5-)
        notify-send -t 10000 "Backup Complete" "Backup performed successfully in ${runtime}s. Added: $added"
    fi
    rm -rfv "$tmp_out"
}



verify_restic_binary
[ ! -z "${SKIP_VERIFY_REPO:-}" ] || verify_repo

restic cache --cleanup
case "$1" in
"backup"|"auto-backup")
    perform_automatic_backup
    ;;
"clean-backup")
    run_restic_command forget $FORGET_ARGS -g "host" -n
    run_restic_command prune --max-unused=0
    ;;
*)
    run_restic_command "$@"
    ;;
esac
